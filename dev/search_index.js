var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#SLOPE.SLOPE","page":"API Reference","title":"SLOPE.SLOPE","text":"module SLOPE\n\nSorted L-One Penalized Estimation\n\n\n\n\n\n","category":"module"},{"location":"api/#SLOPE.slope","page":"API Reference","title":"SLOPE.slope","text":"slope(x, y; kwargs...) -> NamedTuple\n\nFit a SLOPE (Sorted L1 Penalized Estimation) model to the provided data.\n\nSLOPE is a regularization method that combines the L1 norm with a sorted penalty, encouraging both sparsity and grouping of features.\n\nArguments\n\nx: Matrix of predictors (dense or sparse)\ny: Response variable (vector)\n\nKeyword Arguments\n\nα::Union{AbstractVector,Nothing}=nothing: Alpha sequence for regularization path\nλ::Union{AbstractVector,Nothing}=nothing: Lambda sequence for regularization path\nfit_intercept::Bool=true: Whether to fit an intercept term\nloss::String=\"quadratic\": Type of loss function\ncentering::String=\"mean\": Method for centering predictors\nscaling::String=\"sd\": Method for scaling predictors\npath_length::Int=100: Number of regularization path points\ntol::Float64=1e-5: Convergence tolerance for optimization\nmax_it::Int=10000: Maximum number of iterations\nq::Float64=0.1: Parameter for regularization sequence\nmax_clusters::Union{Int,Nothing}=nothing: Maximum number of clusters (defaults to n+1)\ndev_change_tol::Float64=1e-5: Tolerance for change in deviance\ndev_ratio_tol::Float64=0.999: Tolerance for ratio of deviance\nα_min_ratio::Union{Float64,Nothing}=nothing: Minimum alpha ratio for regularization path\n\nReturns\n\nA NamedTuple containing:\n\nβ: Array of sparse coefficient matrices along the regularization path\nβ0: Array of intercept values along the regularization path\nα: Effective alpha values used\nλ: Effective lambda values used\n\n\n\n\n\n","category":"function"},{"location":"#SLOPE","page":"Home","title":"SLOPE","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install the package using the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add SLOPE","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively, you can also install the latest development version of the package from the source code on GitHub by calling","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url = \"https://github.com/jolars/SLOPE.jl\")","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SLOPE is a Julia package for Sorted L1 Penalized Estimation (SLOPE), which is a type of regularized regression. SLOPE minimizes the following objective function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"frac1n sum_i=1^n f(y_i x_i^intercal beta) + sum_j=1^p lambda_j beta_(j)","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The SLOPE.jl package is a thin wrapper around the C++ slope library, which provides all of the core functionality. Therefore, if you find any bugs or have feature requests, then it's likely that you should open a ticket in the slope repository rather than here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"That being said, if you find any bugs in the Julia wrapper or there are features in the C++ library that are yet to be implemented in the Julia wrapper, then please open an issue in this repository.","category":"page"}]
}
